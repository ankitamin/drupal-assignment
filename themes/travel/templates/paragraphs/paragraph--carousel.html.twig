{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'slider',
    'container',
    'js-slider',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}
{{ attach_library('travel/carousel') }}
	<div{{attributes.addClass(classes)}} data-visible='{"1280":4,"1024":4,"768":3,"640":2,"0":1.1}' id="{{ paragraph.bundle|clean_unique_id }}">
		{% block content %}
			<div class="slider__container">
				<div class="slider__header">
					<div class="slider__heading">
						<h2 class="slider__title" id="slider-title">
							{{ content.field_carousel_title }}
						</h2>
						<div class="slider__subtitle">
							{{ content.field_carousel_subtitle }}
						</div>
					</div>
					<nav class="slider__controls" aria-label="Slider navigation">
						<button class="slider__arrow slider__arrow--prev" aria-label="Previous slide" type="button" tabindex="0">
							<span class="visually-hidden">Previous</span>
						</button>
						<button class="slider__arrow slider__arrow--next" aria-label="Next slide" type="button" tabindex="0">
							<span class="visually-hidden">Next</span>
						</button>
					</nav>
				</div>
				<div class="slider__viewport" role="group" aria-labelledby="slider-title">
						{{ content.field_carousel_card|render }}
				</div>
        <div
            class="slider__pagination"
            role="tablist"
            aria-label="Slider Pagination"
          ></div>
      </div>
			{% endblock %}
		</div>
	{% endblock paragraph %}
