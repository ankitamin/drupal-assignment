{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('travel/hero-banner') }}
{%
  set classes = [
    'paragraph',
    'featured-section',
    'container',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{# Get the raw field value #}
{% set cta = content.field_feature_cta_link['#items'].0 %}
{% block paragraph %}
	<div{{attributes.addClass(classes)}} id="{{ paragraph.bundle|clean_unique_id }}">
		{% block content %}

			<div class="featured-section__thumbnails">
				{{ content.field_hero_featured_thumbnail }}
			</div>
			<div class="featured-section__content">
				<h2 class="featured-section__title">{{ content.field_hero_featured_title }}</h2>
				<div class="featured-section__subtitle">{{ content.field_hero_featured_subtitle }}</div>
				<div class="featured-section__description">{{ content.field_hero_featured_description }}</div>
				{% if cta %}
					<div class="featured-section__cta">
						{% set cta_url = cta.getUrl().toString() %}
						{% set cta_title = cta.title %}
						<a href="{{ cta_url }}" class="btn btn--icon-right" target="_blank">
							<span class="btn__icon">
								<svg width="34" height="34" viewbox="0 0 34 34" fill="none" xmlns="http://www.w3.org/2000/svg">
									<g>
										<path d="M5.3125 17H28.6875" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
										<path d="M19.125 7.4375L28.6875 17L19.125 26.5625" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
									</g>
								</svg>
							</span>
							<span class="btn__label">{{ cta_title }}</span>
						</a>
					</div>
				{% endif %}
			</div>
		{% endblock %}
	</div>

{% endblock paragraph %}
